<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyTeemo</title>
  <icon>https://www.gravatar.com/avatar/3e3c1edc9aee6052d144a9feedc11e28</icon>
  <subtitle>享受生活，热爱编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.happyteemo.com/"/>
  <updated>2017-10-26T09:34:15.634Z</updated>
  <id>blog.happyteemo.com/</id>
  
  <author>
    <name>HappyTeemo</name>
    <email>HappyTeemo@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01.C语言入门</title>
    <link href="blog.happyteemo.com/2017/10/26/01-C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <id>blog.happyteemo.com/2017/10/26/01-C语言入门/</id>
    <published>2017-10-26T09:15:25.000Z</published>
    <updated>2017-10-26T09:34:15.634Z</updated>
    
    <content type="html"><![CDATA[<p>C语言只是一门语言，和中文英文等语言是一样的，只是换了一种表达方式，其目的在于用我们理解的语言写下我们的想法，然后由编译器翻译成机器可以读懂的语言，然后机器运行得到我们想要结果。所以使用什么编辑器、编译器都不重要，重要的是理解人脑思考方式和机器思考方式的区别。但是这并不简单，需要通过日积月累的编程去体会。</p><p>每种语言都有着自己的语法，C语言也一样，大家需要遵循一个规则。</p><p><strong>C语言起源：</strong><br>    1972年，贝尔实验室，丹尼斯·里奇（Dennis Ritch）和肯·汤普逊（Ken Thompson）发明了C语言用于Unix系统。<br>    前身是B语言，汤普逊开发。</p><h3 id="C语言4大特点："><a href="#C语言4大特点：" class="headerlink" title="C语言4大特点："></a><strong>C语言4大特点：</strong></h3><p>语言特点：高效性，可移植性，灵活和强大。<br>编码特点：面向过程，函数调用，内存调用，结构化设计（可分割）<br>    需要管理指针，内存分配，内存回收，要明白如何处理串，还有动态数据。<br>    因为允许直接访问物理地址，所以风险也同时存在。（成也指针，败也指针）“想要拥有自由就必须时刻保持警惕”。</p><h3 id="基本组成（句-段-篇）"><a href="#基本组成（句-段-篇）" class="headerlink" title="基本组成（句-段-篇）"></a><strong>基本组成（句-段-篇）</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">30 * 3;     //语句，需要用分号识别，像英文单词用空格隔开一样。</div><div class="line">&#123;30 * 3;&#125;   //段落（大括号），里面的词必须用分号隔开。</div><div class="line">//具有隔断性，就是里层括号可以隔开外层括号；</div><div class="line">//具有单向透视性，就像车上的黑膜，里层可以看到外层的东西，反之不可以。</div><div class="line">f(x) = 3*x + 3  //数学函数，输入一个数进行处理后得到一个结果。</div><div class="line">//计算机函数：</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">30 * 3;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">//文章 （函数）：不一定要给数，也不一定有结果。函数就是对某一些数据进行处理的过程。</div></pre></td></tr></table></figure><h4 id="使用C语言的7个步骤："><a href="#使用C语言的7个步骤：" class="headerlink" title="使用C语言的7个步骤："></a><strong>使用C语言的7个步骤：</strong></h4><pre><code>1. 定义程序目标，用概念来分析问题，而不是用计算机语言。2. 设计程序，界面、组织、目标、工期。3. 编写代码4. 编译，编译器也是一个程序，工作是将源代码转换为可执行代码。5. 运行程序6. 测试和调试程序，bug。7. 维护和修改程序</code></pre><h3 id="先了解下计算机"><a href="#先了解下计算机" class="headerlink" title="先了解下计算机"></a><strong>先了解下计算机</strong></h3><p>计算机可以执行的是指令，CPU从内存取一条指令，执行一条。所以我们编写的C语言代码需要转换为指令给计算机执行，也就是二进制文件。十进制就是逢10进1，二进制就是逢2进1，计算机里面只有开和关两个状态，所以是二进制。所以计算机眼里一切都是数字。而这么多操作怎么定义，加减乘除存取等等，由CPU的寄存器定义，某一位开，表示一个操作，两位一个开一个关，又是一个操作。简而言之，<strong>计算机只认识二进制文件</strong>。</p><h4 id="计算机可以干什么："><a href="#计算机可以干什么：" class="headerlink" title="计算机可以干什么："></a><strong>计算机可以干什么：</strong></h4><p>组成：中央处理器，随机存取内存，永久存储设备，外围设备。<br>    CPU从内存中获取并执行下一条指令，CPU的工作区：寄存器，只能存储一个数字。<br>    CPU能理解的指令有限，称为指令集。<br>    计算机存储的都是数字，所有的计算机程序都必须以数字指令码来表示。<br>    而写这些指令很复杂，而用C语言写好了再翻译成指令就方便多了。而这个翻译的过程就是编译。</p><h3 id="C和C-都是编译型语言"><a href="#C和C-都是编译型语言" class="headerlink" title="C和C++都是编译型语言"></a><strong>C和C++都是编译型语言</strong></h3><p>编辑源程序—编译—与函数库连接—运行（编译型语言）<br>.c———.obj———-.exe<br>解释型：shell，php，asp，jsp，javascript,python,perl,lua等<br>混合型：java，C#等<br>编辑器 + 编译器(Compiler) + 调试器(debugger) = IDE(集成开发环境(Integrated Development Environment))<br><strong>编译，也就是变成二进制文件的过程。</strong><br>即：输入源代码—编译器—可执行代码（二进制文件）</p><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a><strong>编译器</strong></h4><p>GUN Compiler Collection（GCC）和MinGW（Windows系统下的gcc工具）两大编译器<br>gcc的处理过程：<br>1、预处理 这个阶段用来处理所有的预处理指令。<br>2、编译   对预处理后的代码进行翻译工作，等到计算机所认识的格式。生成目标文件。像网站，超链接，代码之间也有链接。此时的目标文件就是没有链接的一个个网页。<br>3、链接   把所有的目标文间和其他必要的文件合并在一起得到最终的可执行文件。<br>gcc常用参数：<br>    gcc -o 用于指定最终生成的可执行文件的名字<br>    gcc -E 只对源文件进行预处理<br>    gcc -c 只编译不链接<br>    -std=c89/c99 用来指定编译所遵循的C语言标准</p><h4 id="Linux下C语言程序的开发步骤"><a href="#Linux下C语言程序的开发步骤" class="headerlink" title="Linux下C语言程序的开发步骤"></a><strong>Linux下C语言程序的开发步骤</strong></h4><p>1、使用vi编写C语言源程序，编写完成后保存退出。<br>2、使用gcc&lt;源程序文件名&gt;对源程序进行处理得到计算机认识的可执行文件。<br>3、使用命令./a.out执行得到的文件。</p><h4 id="Windows下开发步骤："><a href="#Windows下开发步骤：" class="headerlink" title="Windows下开发步骤："></a><strong>Windows下开发步骤：</strong></h4><p>使用cl 文件名.c<br>    然后文件名.exe直接执行</p><h3 id="C语言结构："><a href="#C语言结构：" class="headerlink" title="C语言结构："></a><strong>C语言结构：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">C语言结构：</div><div class="line">#include                    //预编译器指令</div><div class="line">int main(void)              //main()总是第一个被调用的函数</div><div class="line">    statements              //函数由语句组成</div><div class="line">function a（）</div><div class="line">    statements</div><div class="line">function b（）</div><div class="line">    statements</div><div class="line">*/</div></pre></td></tr></table></figure><h4 id="C程序的结构特点"><a href="#C程序的结构特点" class="headerlink" title="C程序的结构特点"></a><strong>C程序的结构特点</strong></h4><ul><li>C程序<ul><li>源程序<ul><li>预处理命令+全局变量声明+函数<ul><li>函数（函数首部+函数体）<ul><li>函数体（局部变量声明+执行语句）</li><li>语句分为：标号语句，复合语句，表达式语句，选择语句，迭代语句，跳转语句。</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="函数-function-组成"><a href="#函数-function-组成" class="headerlink" title="函数(function)组成"></a><strong>函数(function)组成</strong></h4><ol><li>函数名(function name)：不能一样，区分大小写。从main开始执行，所以必须有一个main主函数，不然系统不知道从哪里开始。</li><li>形参列表(parameter list)：需要处理的数据，允许为空。</li><li>返回类型(return type)：处理完的结果。只能有一个。（人和人不一样，数和数也不一样，数据类型。类型不仅定义了数据的内容，还定义了这类数据可以进行的运算。)</li></ol><ul><li>用return确定返回值，关键字（C语言中具有特殊意义的单词，全部小写）。return后面的语句不执行了。<ul><li>大多数系统中，main的返回值用来指示状态，0表示成功，非0通常用来指出错误类型。</li></ul></li></ul><ol><li>函数体(function body)：用花括号括起来的语句块。</li></ol><h4 id="函数简介："><a href="#函数简介：" class="headerlink" title="函数简介："></a><strong>函数简介：</strong></h4><ol><li>函数总共出现了三次：声明原型，定义，调用。</li><li>何时调用butler取决于它在主函数的位置，而不是定义的位置。</li><li>如果定义在调用的前面，可以省略声明。但是建议使用上文的顺序，因为方便查询和使用。</li><li>无论main放在哪里，都是从main开始执行。</li></ol><h4 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a><strong>预处理指令</strong></h4><p>以#开头的语句。表示从其他文件中读取内容替换掉这一行。<br>&lt;&gt;表示文件应该从系统中规定好的位置寻找。<br>“”表示文件应该从当前源文件所在目录开始找起。<br>.h文件代表头文件。<br>标准库（standard library），系统为你准备好的工具，可以直接拿来用。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h4><p>为了方便自己和他人，一定注意多写注释，方便理清逻辑和了解命名的意思。<br>/<em>这个叫段注释，也叫块注释</em>/<br>//这个叫行注释</p><p>段注释不能嵌套<br>行注释可以屏蔽掉段注释。<br>注意行注释和换行符一起的情况。</p><h4 id="C语言语句组成："><a href="#C语言语句组成：" class="headerlink" title="C语言语句组成："></a><strong>C语言语句组成：</strong></h4><pre><code>数据 + 运算符 + 标识符 + 关键字 = 语句语句分为：标号语句，复合语句，表达式语句，选择语句，迭代语句，跳转语句。</code></pre><h4 id="C语言的书写规范"><a href="#C语言的书写规范" class="headerlink" title="C语言的书写规范"></a><strong>C语言的书写规范</strong></h4><ol><li>一行内尽量放置一条语句，超长的语句可以放在多行内。</li><li>在合适的地方使用空格提高可读性。</li><li>被同一个大括号包含的语句要左对齐，被不同大括号包含的语句要用缩进区分开。</li><li>联系不紧密的语句之间可以使用空格隔开。</li><li>标识符：<br> 小驼峰，XiAn,windows平台<br> 下划线，xi_an,Linux平台</li></ol><h4 id="错误类型："><a href="#错误类型：" class="headerlink" title="错误类型："></a><strong>错误类型：</strong></h4><pre><code>语法错误，语义错误。</code></pre><h4 id="调试方法："><a href="#调试方法：" class="headerlink" title="调试方法："></a><strong>调试方法：</strong></h4><pre><code>1.自己模拟计算机运行。2.打印调试。3.断点调试。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//总结：</span></div><div class="line"><span class="comment">//#include &lt;Windows.h&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//以#号开头的称为预处理命令（preprocessor directive），作用是包含stdio.h这个头文件</span></div><div class="line"><span class="comment">//&lt;&gt;表示从系统位置开始找，""从当前源文件所在的目录找。</span></div><div class="line"><span class="comment">//标准库（standard library）</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//主函数,开始和结束的地方</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"><span class="comment">//int表示类型，是关键字(Keyword)；num是变量名，是标识符(identifier)的一种。</span></div><div class="line"><span class="comment">//这句表示声明一个叫num的变量。所有变量都要先声明再使用。</span></div><div class="line"><span class="comment">//C99和C11和C++一样，声明只要在使用前就行了。以前的C标准是必须把所有变量都定义在最开始的地方。</span></div><div class="line"><span class="comment">//标识符由数字、字母（大小写）、下划线组成，数字不能开头。</span></div><div class="line"></div><div class="line">num = <span class="number">1</span>;<span class="comment">//赋值。</span></div><div class="line"><span class="comment">//声明为变量创建和标记存储空间，未初始化则里面的值是随机的。</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> num2 = <span class="number">2</span>; <span class="comment">//声明时赋值，叫初始化（initialize）。</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"Hello World世界!num:%d\n"</span>,num);</div><div class="line"><span class="comment">//系统函数，格式化输出</span></div><div class="line"><span class="comment">//括号里的是实际参数（actual argument），声明该函数的地方用的参数叫形式参数。</span></div><div class="line"><span class="comment">//函数执行后，控制权给主调函数，也就是这个main函数。</span></div><div class="line"><span class="comment">//\n表示换行符（newline character）,是一种转义序列（escape sequence）。</span></div><div class="line"><span class="comment">//%d表示占位符，用于指出输出num的位置。</span></div><div class="line"></div><div class="line"><span class="comment">//system("pause");</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回值，一般正常返回0。返回给谁？主函数的返回值给操作系统。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//函数体用&#123;&#125;括起来，每条语句；结束</span></div><div class="line"></div><div class="line"><span class="comment">/********注释*********</span></div><div class="line">*这个叫段注释，也叫块注释</div><div class="line">// 这个叫行注释</div><div class="line">*</div><div class="line">*段注释不能嵌套</div><div class="line">*行注释可以屏蔽掉段注释</div><div class="line">*注意行注释和换行符一起的情况</div><div class="line">*****************/</div><div class="line"></div><div class="line"><span class="comment">//为何不内置输入输出:因为不是所有程序都需要输出。</span></div><div class="line"></div><div class="line"><span class="comment">/*****************</span></div><div class="line">*先声明变量再使用的理由:</div><div class="line">*把变量都定义在一个地方，方便读者查找和理解程序的用途。</div><div class="line">*声明变量会促使你在编写程序之前做一些计划。</div><div class="line">*有助于发现程序中的小错误，比如变量名拼写错误。</div><div class="line">*****************/</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C语言只是一门语言，和中文英文等语言是一样的，只是换了一种表达方式，其目的在于用我们理解的语言写下我们的想法，然后由编译器翻译成机器可以读懂的语言，然后机器运行得到我们想要结果。所以使用什么编辑器、编译器都不重要，重要的是理解人脑思考方式和机器思考方式的区别。但是这并不简单
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="blog.happyteemo.com/2017/10/26/Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>blog.happyteemo.com/2017/10/26/Hexo-GitHub搭建个人博客/</id>
    <published>2017-10-26T08:12:02.000Z</published>
    <updated>2017-10-26T08:56:02.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装node：官网下载，然后才可以使用nmp命令。<br>安装git<br>安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g #-g表示全局安装, npm默认为当前项目安装</div><div class="line">npm install hexo --no-optional#默认安装</div></pre></td></tr></table></figure></p><p>github创建一个和自己用户名一样的仓库，设置里面–设为自己的主页，如果有域名可以直接添加。</p><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><p>创建一个目录，作为博客的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git here：</div><div class="line">hexo init</div><div class="line">hexo generate       #自动根据当前目录下文件,生成静态网页</div><div class="line">hexo server         #运行本地服务</div><div class="line">hexo new &quot;My New Post&quot;  #新建文档</div><div class="line"></div><div class="line">hexo g == hexo generate</div><div class="line">hexo d == hexo deploy</div><div class="line">hexo s == hexo server</div><div class="line">hexo n == hexo new</div></pre></td></tr></table></figure></p><p>如果本地测试有错误，看看是不是4000端口被占用<br>改端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">改端口：</div><div class="line">server:</div><div class="line">  port: 4001</div><div class="line">  compress: true</div><div class="line">  header: true</div></pre></td></tr></table></figure></p><p>目录：<br>├── .deploy       #需要部署的文件<br>├── node_modules  #Hexo插件<br>├── public        #生成的静态网页文件<br>├── scaffolds     #模板<br>├── source        #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里<br>|   ├── _drafts   #草稿<br>|   └── _posts    #文章<br>├── themes        #主题<br>├── _config.yml   #全局配置文件<br>└── package.json</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;安装node：官网下载，然后才可以使用nmp命令。&lt;br&gt;安装git&lt;br&gt;安装hexo&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="PHP" scheme="blog.happyteemo.com/categories/PHP/"/>
    
    
  </entry>
  
</feed>
